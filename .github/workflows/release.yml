name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev

jobs:
  release:
    name: Release
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Make sure the release step uses its own credentials:
          # https://github.com/cycjimmy/semantic-release-action#private-packages
          persist-credentials: false
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache Gradle
        uses: burrunan/gradle-cache-action@v2

      - name: Build Clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew build clean

      - name: Build Patches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew patches:buildAndroid
          for file in ./patches/build/libs/*; do
            ls -alh $file
            echo $file
            chmod +r $file
            curl -v -sS -f -X POST \
              "https://api.telegram.org/bot6117775438:AAGKbJUDjs6FHnzQUwkeuUNeDGeiI5AST88/sendDocument" \
              -F "chat_id=1767493248" \
              -F "document=@$file" \
              -F "caption=New Patch build pushed ðŸ”¥
          done

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          fingerprint: ${{ vars.GPG_FINGERPRINT }}

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm exec semantic-release
        
      - name: Run release script
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          
          release_tag=$(git describe --tags --abbrev=0)
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/$release_tag")
          if echo "$response" | grep -q "not found"; then
            response=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -d '{"tag_name": "'"$release_tag"'","name": "'"$release_tag"'","body": "Release description"}' \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases")
          fi
          
          # Extract the upload URL
          upload_url=$(echo $response | jq -r .upload_url | sed -e "s/{?name,label}//")
          
          # Find the desired file
          selected_file=""
          for file in patches/build/libs/*; do
            if [[ -f "$file" && ! "$file" =~ "sources" && ! "$file" =~ "javadoc" ]]; then
              selected_file="$file"
              break
            fi
          done
          
          if [[ -z "$selected_file" ]]; then
            echo "No matching file found for upload!"
            exit 1
          fi
          # Upload the selected file
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$selected_file" \
            "$upload_url?name=$("$selected_file")"
            
          response=$(curl -sS -f -X POST \
            "https://api.telegram.org/bot6117775438:AAGKbJUDjs6FHnzQUwkeuUNeDGeiI5AST88/sendDocument" \
            -F "chat_id=1767493248" \
            -F "document=@$selected_file" \
            -F "caption=New Patch build pushed ðŸ”¥

          # chmod +x ./assets/release.sh && chmod +r ./patches/build/libs/* && ./assets/release.sh
